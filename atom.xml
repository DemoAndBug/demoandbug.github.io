<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon&#39;s Blog</title>
  
  
  <link href="http://www.simonren.com/atom.xml" rel="self"/>
  
  <link href="http://www.simonren.com/"/>
  <updated>2022-12-14T02:48:13.782Z</updated>
  <id>http://www.simonren.com/</id>
  
  <author>
    <name>Simon Ren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AOSP代码浏览与调试</title>
    <link href="http://www.simonren.com/AOSP%E4%BB%A3%E7%A0%81%E6%B5%8F%E8%A7%88%E4%B8%8E%E8%B0%83%E8%AF%95"/>
    <id>http://www.simonren.com/AOSP%E4%BB%A3%E7%A0%81%E6%B5%8F%E8%A7%88%E4%B8%8E%E8%B0%83%E8%AF%95</id>
    <published>2022-04-12T02:47:27.000Z</published>
    <updated>2022-12-14T02:48:13.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过Android Studio 浏览与调试AOSP源码</p><h2 id="AOSP代码导入到Android-Studio"><a href="#AOSP代码导入到Android-Studio" class="headerlink" title="AOSP代码导入到Android Studio"></a>AOSP代码导入到Android Studio</h2><h3 id="创建IDE项目"><a href="#创建IDE项目" class="headerlink" title="创建IDE项目"></a>创建IDE项目</h3><p>AOSP 有一个名为 IDEGen 的工具，可以生成适合的项目文件适用于 IntelliJ IDEA（包括 Android Studio）<br>具体详情可以参考：aosp&#x2F;development&#x2F;tools&#x2F;idegen&#x2F;README</p><span id="more"></span><p>首先设置好AOSP环境：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd aosp/</span><br><span class="line">. build/envsetup.sh</span><br><span class="line">lunch</span><br></pre></td></tr></table></figure><p>构建 IDEGen</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m idegen</span><br></pre></td></tr></table></figure><p><img src="/images/midegen.png" loading="lazy"><br><img src="/images/idegen.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd aosp/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>通过输出日志可以看到创建一个 IntelliJ 项目文件android.ipr和一个 IntelliJ 模块列表android.iml<br>注意：每次在 $AOSP 中添加目录时都必须重新运行此步骤</p><h3 id="配置Android-Studio"><a href="#配置Android-Studio" class="headerlink" title="配置Android Studio"></a>配置Android Studio</h3><p>AOSP项目很大，所以IDEA需要大量内存，README建议配置为“-Xms1g -Xmx5g”；<br>配置步骤: Help &gt; Edit Custom VM</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms1g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><p>配置好后可以通过AndroidStudio打开$AOSP&#x2F;android.ipr，等待完成索引后，就可以通过Android Studio 浏览与搜索代码了。<br>注意：<br>1、网络代理需要能正常访问<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLmdvb2dsZXNvdXJjZS5jb20v">https://android.googlesource.com/<i class="fa fa-external-link-alt"></i></span><br>2、剩余存储空间需要足够，自己电脑剩余80G空间时，构建索引时提示了空间存储不足<br>3、构建索引时间会比较长，也取决于电脑性能，可以去吃个饭或者睡个觉</p><p><img src="/images/openandroid.png" loading="lazy"><br><img src="/images/androidImport.png" loading="lazy"></p><h2 id="AOSP代码调试方法"><a href="#AOSP代码调试方法" class="headerlink" title="AOSP代码调试方法"></a>AOSP代码调试方法</h2><p>1.Android是使用JDWP（Java Debug Wire Protocol）进行调试<br>2.所有组件在userdebug与eng版本中JDWP是默认开启的<br>3.在user版本中，应用需要在AndroidManifest.xml中添加android:debuggable&#x3D;&quot;true&quot; 去开启JDWP</p><p>system_server 是一个 Java 程序（不是应用程序），它实现了Android核心框架，在userdebug和eng版本中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看所有进程</span><br><span class="line">adb shell ps -ef</span><br><span class="line">UID            PID  PPID C STIME TTY          TIME CMD</span><br><span class="line">root             1     0 0 21:05:46 ?     00:11:17 init second_stage</span><br><span class="line">root             2     0 0 21:05:46 ?     00:00:01 [kthreadd]</span><br><span class="line">...</span><br><span class="line">system        1676  1018 5 21:05:53 ?     02:24:48 system_server</span><br><span class="line"></span><br><span class="line">//根据条件过滤</span><br><span class="line">adb shell ps -ef | grep &quot;system_server&quot;</span><br><span class="line">system        1676  1018 5 21:05:53 ?     02:24:35 system_server</span><br><span class="line"></span><br><span class="line">//显示与system_server关联的所有进程</span><br><span class="line">adb shell ps -ATp 1676</span><br><span class="line">USER           PID   TID  PPID     VSZ    RSS WCHAN            ADDR S CMD</span><br><span class="line">system        1676  1676  1018 18997780 303204 0                  0 S system_server</span><br><span class="line">system        1676  1708  1018 18997780 303204 0                  0 S Signal Catcher</span><br><span class="line">...</span><br><span class="line">system        1676  1837  1018 18997780 303204 0                  0 S android.bg</span><br><span class="line">system        1676  1838  1018 18997780 303204 0                  0 S ActivityManager</span><br></pre></td></tr></table></figure><p>参考文档：<br><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTcvMDcvMjAvYW5kcm9pZC1yZW1vdGUtZGVidWcuaHRtbA==">Android远程调试的探索与实现<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5nb29nbGUuY24vZG9jcy9jb3JlL3Rlc3RzL2RlYnVnL2dkYj9obD16aC1jbiNhcHAtc3RhcnR1cA==">Using Debuggers<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly90aW55bGFiLm9yZy91c2UtamRiLXRvLWRlYnVnLWFuZHJvaWQtYXBwbGljYXRpb24v">使用 JDB 调试 Android 应用程序<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;通过Android Studio 浏览与调试AOSP源码&lt;/p&gt;
&lt;h2 id=&quot;AOSP代码导入到Android-Studio&quot;&gt;&lt;a href=&quot;#AOSP代码导入到Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;AOSP代码导入到Android Studio&quot;&gt;&lt;/a&gt;AOSP代码导入到Android Studio&lt;/h2&gt;&lt;h3 id=&quot;创建IDE项目&quot;&gt;&lt;a href=&quot;#创建IDE项目&quot; class=&quot;headerlink&quot; title=&quot;创建IDE项目&quot;&gt;&lt;/a&gt;创建IDE项目&lt;/h3&gt;&lt;p&gt;AOSP 有一个名为 IDEGen 的工具，可以生成适合的项目文件适用于 IntelliJ IDEA（包括 Android Studio）&lt;br&gt;具体详情可以参考：aosp&amp;#x2F;development&amp;#x2F;tools&amp;#x2F;idegen&amp;#x2F;README&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://www.simonren.com/categories/Android/"/>
    
    <category term="aosp" scheme="http://www.simonren.com/categories/Android/aosp/"/>
    
    
    <category term="aosp" scheme="http://www.simonren.com/tags/aosp/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin读书笔记-基础语法</title>
    <link href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95"/>
    <id>http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2022-12-14T01:45:54.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin基础语法"><a href="#Kotlin基础语法" class="headerlink" title="Kotlin基础语法"></a>Kotlin基础语法</h1><h2 id="1-不一样的类型声明"><a href="#1-不一样的类型声明" class="headerlink" title="1.不一样的类型声明"></a>1.不一样的类型声明</h2><p>在Java中，我们会把类型名称放在前面，如下声明一个变量。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String java = &quot;I am Java&quot;;</span><br></pre></td></tr></table></figure><p>Kotlin则采用不同的做法，与Java相反类型名放在变量名的后面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val kotlin:String = &quot;I am Kotlin&quot;</span><br></pre></td></tr></table></figure><p>为什么采用这样的声明? Kotling官方FAQ的回答：<br>这样可以是代码的可读性更好，同时也有利于使用一些良好的语法特性，比如省略类型声明</p><h2 id="2-增强的类型推导"><a href="#2-增强的类型推导" class="headerlink" title="2.增强的类型推导"></a>2.增强的类型推导</h2><p>类型推导是Kotlin在Java基础上增强的语言特性之一。通俗的理解，编译器可以在不显示声明类型的情况下，自动推导出它所需要的类型。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    val string = &quot;I am Kotlin&quot;</span><br><span class="line">    val int = 1234</span><br><span class="line">    val long = 1234L</span><br><span class="line">    val float = 1234f</span><br><span class="line">    val double = 12.34</span><br><span class="line">    val double2 = 10.1e6</span><br><span class="line"></span><br><span class="line">    printlnClassName(string)</span><br><span class="line">    printlnClassName(int)</span><br><span class="line">    printlnClassName(long)</span><br><span class="line">    printlnClassName(float)</span><br><span class="line">    printlnClassName(double)</span><br><span class="line">    printlnClassName(double2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun printlnClassName(msg: Any) &#123;</span><br><span class="line">    println(msg.javaClass.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果去下：</span><br><span class="line"></span><br><span class="line">java.lang.String</span><br><span class="line">java.lang.Integer</span><br><span class="line">java.lang.Long</span><br><span class="line">java.lang.Float</span><br><span class="line">java.lang.Double</span><br><span class="line">java.lang.Double</span><br></pre></td></tr></table></figure><p>类型推导在很大程度上提高了Kotlin这种静态语言的开发效率</p><h2 id="3-声明函数的返回值类型"><a href="#3-声明函数的返回值类型" class="headerlink" title="3.声明函数的返回值类型"></a>3.声明函数的返回值类型</h2><p>虽然Kotlin很大程度上支持了类型推导，并不意味着我们可以不声明函数返回值类型，如下定义一个函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun sum(x: Int, y: Int): Int &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">与声明变量一样，类型信息放在函数名的后面，如果把声明去掉：</span><br><span class="line"></span><br><span class="line">fun sumOther(x:Int,y: Int)&#123;return x+y&#125;</span><br><span class="line"></span><br><span class="line">IDEA会直接提示返回类型与需求类型不一致 函数需要返回Unit类型，而实际返回Int类型。</span><br></pre></td></tr></table></figure><p>总结：<br>如果他是函数的参数，必须声明类型<br>如果它是非表达式定义的函数，除了Unit 也必须声明<br>如果是递归使用，必须声明类型<br>如果是公共方法的返回值，建议使用，为了提供更好的代码可读性。</p><h2 id="4-val与var的使用规则"><a href="#4-val与var的使用规则" class="headerlink" title="4.val与var的使用规则"></a>4.val与var的使用规则</h2><p>与Java另一点不同在于，Kotlin声明变量时，引入了val和var的概念。var很容易理解，JavaScript等其他语言也通过该关键字来声明变量，它对应的就是Java中的变量。</p><p>如果说var代表了varible（变量），那么val可看成value（值）的缩写。但也有人觉得这样并不直观或准确，而是把val解释成varible+final，即通过val声明的变量具有Java中的final关键字的效果，也就是引用不可变。<br>注：我们可以在IntelliJ IDEA或Android Studio中查看val语法反编译后转化的Java代码，从中可以很清楚地发现它是用final实现这一特性的</p><h3 id="4-1-val的含义引用不可变"><a href="#4-1-val的含义引用不可变" class="headerlink" title="4.1 val的含义引用不可变"></a>4.1 val的含义引用不可变</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public fun main() &#123;</span><br><span class="line">    val arrayVal = intArrayOf(1,2,3)</span><br><span class="line">    //Val cannot be reassigned</span><br><span class="line">    //arrayVal = intArrayOf(2,3,4)</span><br><span class="line">    println(arrayVal)</span><br><span class="line">    println(arrayVal[0])</span><br><span class="line">    arrayVal[0] = 5</span><br><span class="line">    println(arrayVal)</span><br><span class="line">    println(arrayVal[0])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[I@7eda2dbb</span><br><span class="line">1</span><br><span class="line">[I@7eda2dbb</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>通过输出引用不可变，所以arrayVal不能指向另一个数组，但我们可以修改数组里的值<br>因此，val声明的变量是只读变量，它的引用不可更改，但并不代表其引用对象也不可变。事实上，我们依然可以修改引用对象的可变成员。</p><h3 id="4-2-优先使用val来避免副作用"><a href="#4-2-优先使用val来避免副作用" class="headerlink" title="4.2 优先使用val来避免副作用"></a>4.2 优先使用val来避免副作用</h3><p>在很多Kotlin的学习资料中，都会传递一个原则：优先使用val来声明变量。<br>简单来说，副作用就是修改了某处的某些东西，比方说：<br>❑ 修改了外部变量的值。<br>❑ IO操作，如写数据到磁盘。<br>❑ UI操作，如修改了一个按钮的可操作状态。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public fun main() &#123;</span><br><span class="line">    count(1)</span><br><span class="line">    count(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var  a = 1</span><br><span class="line">public fun count(i :Int)&#123;</span><br><span class="line">    a= a+1</span><br><span class="line">    println(i+a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>在以上代码中，我们会发现多次调用count(1)得到的结果并不相同，显然这是受到了外部变量a的影响，这个就是典型的副作用。如果我们把var换成val，然后再执行类似的操作，编译就会报错。这就有效避免了之前的情况</p><p>当然，这并不意味着用val声明变量后就不能再对该变量进行赋值，事实上，Kotlin也支持我们在一开始不定义val变量的取值，随后再进行赋值。然而，因为引用不可变，val声明的变量只能被赋值一次，且在声明时不能省略变量类型.</p><h3 id="4-3-var的适用范围"><a href="#4-3-var的适用范围" class="headerlink" title="4.3 var的适用范围"></a>4.3 var的适用范围</h3><p>一个可能被提及的问题是：既然val这么好，那么为什么Kotlin还要保留var呢？<br>一个可能被提及的问题是：既然val这么好，那么为什么Kotlin还要保留var呢？事实上，从Kotlin诞生的那一刻就决定了必须拥抱var，因为它兼容Java。除此之外，在某些场景使用var确实会起到不错的效果。举个例子，假设我们现在有一个整数列表，然后遍历元素操作后获得计算结果，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun callVar(list: List&lt;Int&gt;): Int &#123;  //5,2,3      5,10,12,36,39</span><br><span class="line">    var res = 0;</span><br><span class="line">    for (a in list) &#123;</span><br><span class="line">        res *= a</span><br><span class="line">        res += a</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我们非常熟悉的做法，以上代码中的res是个局部的可变变量，它与外界没有任何交互，非常安全可控。<br>我们再来尝试用val实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun callVal(list: List&lt;Int&gt;): Int &#123;</span><br><span class="line">    fun recurse(list: List&lt;Int&gt;, res: Int): Int &#123;</span><br><span class="line">        return if (list.isNotEmpty()) &#123;</span><br><span class="line">            val a = list.first();</span><br><span class="line">            recurse(list.drop(1), res * a + a)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return recurse(list, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就必须利用递归才能实现，原本非常简单的逻辑现在变得非常不直观。<br>不过Kotlin List有个fold操作函数可以实现一个精简的操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.</span><br><span class="line"> */</span><br><span class="line">public inline fun &lt;T, R&gt; Iterable&lt;T&gt;.fold(initial: R, operation: (acc: R, T) -&gt; R): R &#123;</span><br><span class="line">    var accumulator = initial</span><br><span class="line">    for (element in this) accumulator = operation(accumulator, element)</span><br><span class="line">    return accumulator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun call(list: List&lt;Int&gt;): Int &#123;</span><br><span class="line">    return list.fold(0) &#123; res, el -&gt;</span><br><span class="line">        res * el + el</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>1）用val声明的属性将只有getter方法，因为它不可修改；而用var修饰的属性将同时拥有getter和setter方法。<br>2）用private修饰的属性编译器将会省略getter和setter方法，因为在类外部已经无法访问它了，这两个方法的存在也就没有意义了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Kotlin基础语法&quot;&gt;&lt;a href=&quot;#Kotlin基础语法&quot; class=&quot;headerlink&quot; title=&quot;Kotlin基础语法&quot;&gt;&lt;/a&gt;Kotlin基础语法&lt;/h1&gt;&lt;h2 id=&quot;1-不一样的类型声明&quot;&gt;&lt;a href=&quot;#1-不一样的类型声明&quot; class=&quot;headerlink&quot; title=&quot;1.不一样的类型声明&quot;&gt;&lt;/a&gt;1.不一样的类型声明&lt;/h2&gt;&lt;p&gt;在Java中，我们会把类型名称放在前面，如下声明一个变量。&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="http://www.simonren.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="kotlin" scheme="http://www.simonren.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/kotlin/"/>
    
    
    <category term="基础" scheme="http://www.simonren.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="kotlin" scheme="http://www.simonren.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin读书笔记-面向对象</title>
    <link href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1"/>
    <id>http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2022-12-14T01:45:54.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin面向对象"><a href="#Kotlin面向对象" class="headerlink" title="Kotlin面向对象"></a>Kotlin面向对象</h1><h2 id="1-Kotlin中的类"><a href="#1-Kotlin中的类" class="headerlink" title="1.Kotlin中的类"></a>1.Kotlin中的类</h2><p>对象是由状态和行为组成的，我们可以根据他们描述一个事物。我们通过Kotlin定义一个User类</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    var name: String = &quot;simon&quot;</span><br><span class="line">    var surname: String = &quot;&quot;</span><br><span class="line">        get() = field.toUpperCase()</span><br><span class="line"></span><br><span class="line">    var isEmail: Boolean = false</span><br><span class="line"></span><br><span class="line">    var email: String = &quot;&quot;</span><br><span class="line">        set(value) &#123;</span><br><span class="line">            if (isEmailValid(value)) field = value</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    private fun isEmailValid(value: String): Boolean &#123;</span><br><span class="line">        return isEmail</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //全局可见</span><br><span class="line">    fun eat() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用熟悉的class 结构来声明一个类，我们将上述代码反编译成Java版本，然后分析差异。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class User &#123;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String name = &quot;simon&quot;;</span><br><span class="line">   private final int age = 1;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String surname = &quot;&quot;;</span><br><span class="line">   private boolean isEmail;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String email = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">   @NotNull</span><br><span class="line">   public final String getName() &#123;</span><br><span class="line">      return this.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void setName(@NotNull String var1) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(var1, &quot;&lt;set-?&gt;&quot;);</span><br><span class="line">      this.name = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final int getAge() &#123;</span><br><span class="line">      return this.age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private final boolean isEmailValid(String value) &#123;</span><br><span class="line">      return this.isEmail;</span><br><span class="line">   &#125;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，虽然Kotlin中类声明的语法非常近似Java，但也存在很多不同：<br>1）不可变属性成员。Kotlin支持用val在类中声明引用不可变的属性成员，这是利用Java中的final修饰符来实现的，使用var声明的属性则反之引用可变。<br>2）属性默认值。因为Java的属性都有默认值，比如int类型的默认值为0，引用类型的默认值为null，所以在声明属性的时候我们不需要指定默认值。而在Kotlin中，除非显式地声明延迟初始化，不然就需要指定属性的默认值<br>3）不同的可访问修饰符。Kotlin类中的成员默认是全局可见，而Java的默认可见域是包作用域，因此在Java版本中，我们必须采用public修饰才能达相同的效果  </p><h2 id="2-Kotlin中的接口"><a href="#2-Kotlin中的接口" class="headerlink" title="2.Kotlin中的接口"></a>2.Kotlin中的接口</h2><p>众所周知，Java8引入了一个新特性：接口方法支持默认实现，接下来看看Kotlin 如何声明一个接口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Behavior &#123;</span><br><span class="line">    val id: Int</span><br><span class="line">    fun eat()</span><br><span class="line">    fun test()&#123;</span><br><span class="line">        println(&quot;test&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面Kotlin声明的接口转换为Java代码，提取其中关键的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Behavior &#123;</span><br><span class="line">   int getId();</span><br><span class="line"></span><br><span class="line">   void eat();</span><br><span class="line"></span><br><span class="line">   void test();</span><br><span class="line"></span><br><span class="line">   @Metadata(</span><br><span class="line">      mv = &#123;1, 1, 16&#125;,</span><br><span class="line">      bv = &#123;1, 0, 3&#125;,</span><br><span class="line">      k = 3</span><br><span class="line">   )</span><br><span class="line">   public static final class DefaultImpls &#123;</span><br><span class="line">      public static void test(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上，Kotlin可以定义带有方法实现的接口，还支持抽象属性（上面的id），同时kotlin是基于Java6的，看反编译后的Java代码，Kotlin编译器是通过一个静态内部类DefaultImpls来实现test的。</p><p>上述代码若直接对id进行默认赋值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Behavior &#123;</span><br><span class="line">    val id: Int = 10 //idea会提示：Property initializers are not allowed in interfaces</span><br><span class="line">    fun eat()</span><br><span class="line">    fun test()&#123;</span><br><span class="line">        println(&quot;test&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 提供了另外一种方式实现了这种效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val id: Int</span><br><span class="line">     get() = 10</span><br></pre></td></tr></table></figure><p>反编译后Java代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Behavior &#123;</span><br><span class="line">   int getId();</span><br><span class="line"></span><br><span class="line">   void eat();</span><br><span class="line"></span><br><span class="line">   void test();</span><br><span class="line"></span><br><span class="line">   void test2();</span><br><span class="line"></span><br><span class="line">   @Metadata(</span><br><span class="line">      mv = &#123;1, 1, 16&#125;,</span><br><span class="line">      bv = &#123;1, 0, 3&#125;,</span><br><span class="line">      k = 3</span><br><span class="line">   )</span><br><span class="line">   public static final class DefaultImpls &#123;</span><br><span class="line">      public static int getId(Behavior $this) &#123;</span><br><span class="line">         return 10;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public static void test(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public static void test2(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test2&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin接口中的属性背后其实是用方法来实现的，所以说如果我们要为变量赋值常量，那么就需要编译器原生就支持方法默认实现。但Kotlin是基于Java6的，当时并不支持这种特性，所以我们并不能像Java那样给一个接口的属性直接赋值一个常量。</p><h2 id="3-Kotlin中的构造函数"><a href="#3-Kotlin中的构造函数" class="headerlink" title="3.Kotlin中的构造函数"></a>3.Kotlin中的构造函数</h2><p>需要注意的是Kotlin中并没有我们熟悉的new关键字，你可以直接声明一个类的对象：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val user = User()</span><br></pre></td></tr></table></figure><p>现实中，你很可能因为需要传入不同的参数组合，而在类中创建多个构造方法，在Java中这是利用构造方法重载来实现的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age, String email) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现Java中的这种方式存在两个缺点：<br>❑ 如果要支持任意参数组合来创建对象，那么需要实现的构造方法将会非常多。<br>❑ 每个构造方法中的代码会存在冗余，如前两个构造方法都对age和name进行了相同的赋值操作。</p><p>在Kotlin中是通过引入新的构造语法来解决这些问题。从而避免不必要的方法重载。用Kotlin改下如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    val name: String = &quot;simon&quot;,</span><br><span class="line">    val age: Int = 18,</span><br><span class="line">    val email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    //这里可以省略&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一行代码就可以实现与java等价的效果。需要注意的是，由于参数默认值的存在，我们在创建一个类对象时，最好指定参数的名称，否则必须按照实际参数的顺序进行赋值。</p><p>我们在类中可以用val或者var来声明构造方法的参数。这一方面代表了参数的引用可变性，另一方面它也使得我们在构造类的语法上得到了简化。事实上，构造方法的参数名前当然可以没有val和var，然而带上它们之后就等价于在类内部声明了一个同名的属性，我们可以用this来进行调用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    name: String = &quot;simon&quot;,</span><br><span class="line">    age: Int = 18,</span><br><span class="line">    email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val name: String</span><br><span class="line">    val age: Int</span><br><span class="line">    val email: String</span><br><span class="line">    init &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.email = email</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反编译成java代码可以看出两者是等价的。</p><h2 id="3-Kotlin中的init语句快"><a href="#3-Kotlin中的init语句快" class="headerlink" title="3.Kotlin中的init语句快"></a>3.Kotlin中的init语句快</h2><p>Kotlin引入了一种叫作init语句块的语法，它属于上述构造方法的一部分，两者在表现形式上却是分离的。类的构造方法在类的外部，它只能对参数进行赋值。如果我们需要在初始化时进行其他的额外操作，那么我们就可以使用init语句块来执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    name: String = &quot;simon&quot;,</span><br><span class="line">    age: Int = 18,</span><br><span class="line">    email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val name: String</span><br><span class="line">    val age: Int</span><br><span class="line">    val email: String</span><br><span class="line">    init &#123;</span><br><span class="line">        println(&quot;do some other things&quot;)</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.email = email</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main()&#123;</span><br><span class="line">    val user = User(&quot;test&quot;, 20, &quot;hi&quot;)</span><br><span class="line">    println(user.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">do some other things</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>事实上，我们的构造方法还可以拥有多个init，它们会在对象被创建时按照类中从上到下的顺序先后执行，通过该特性我们可以使用多个init语句块进行职能分离，这在复杂的业务开发（如Android）中会显得特别有用。</p><h2 id="4-Kotlin中的延时初始化"><a href="#4-Kotlin中的延时初始化" class="headerlink" title="4.Kotlin中的延时初始化"></a>4.Kotlin中的延时初始化</h2><p>延时初始化即我们可以不用在类对象初始化的时候就必须有值。在Kotlin中，我们主要使用lateinit和by lazy这两种语法来实现延迟初始化的效果。</p><p>如果这是一个用val声明的变量，我们可以用by lazy来修饰：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    val name: String = &quot;simon&quot;,</span><br><span class="line">    val age: Int = 18,</span><br><span class="line">    val email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val category: String by lazy &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结by lazy语法的特点如下：<br>❑ 该变量必须是引用不可变的，而不能通过var来声明。<br>❑ 在被首次调用时，才会进行赋值操作。一旦被赋值，后续它将不能被更改。</p><p>lazy的背后是接受一个lambda并返回一个Lazy <T>实例的函数，第一次访问该属性时，会执行lazy对应的Lambda表达式并记录结果，后续访问该属性时只是返回记录的结果。</p><p>另外系统会给lazy属性默认加上同步锁，有如下几种模式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    //默认添加 、线程安全，同一时刻只允许一个线程对lazy属性进行初始化</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //并行模式，可以并行执行，没有线程安全问题</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.PUBLICATION) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不做任何线程保证也不会有任何线程开销</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.NONE) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">源码：</span><br><span class="line"></span><br><span class="line">Lazy.kt</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.</span><br><span class="line"> */</span><br><span class="line">public enum class LazyThreadSafetyMode &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.</span><br><span class="line">     */</span><br><span class="line">    SYNCHRONIZED,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,</span><br><span class="line">     * but only the first returned value will be used as the value of [Lazy] instance.</span><br><span class="line">     */</span><br><span class="line">    PUBLICATION,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.</span><br><span class="line">     *</span><br><span class="line">     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.</span><br><span class="line">     */</span><br><span class="line">    NONE,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LazyJVM.kt:</span><br><span class="line"></span><br><span class="line">public actual fun &lt;T&gt; lazy(mode: LazyThreadSafetyMode, initializer: () -&gt; T): Lazy&lt;T&gt; =</span><br><span class="line">    when (mode) &#123;</span><br><span class="line">        LazyThreadSafetyMode.SYNCHRONIZED -&gt; SynchronizedLazyImpl(initializer)</span><br><span class="line">        LazyThreadSafetyMode.PUBLICATION -&gt; SafePublicationLazyImpl(initializer)</span><br><span class="line">        LazyThreadSafetyMode.NONE -&gt; UnsafeLazyImpl(initializer)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>与lazy不同，lateinit主要用于var声明的变量，然而它不能用于基本数据类型，如Int、Long等，我们需要用Integer这种包装类作为替代.</p><p>总而言之，Kotlin并不主张用Java中的构造方法重载，来解决多个构造参数组合调用的问题。取而代之的方案是利用构造参数默认值及用val、var来声明构造参数的语法，以更简洁地构造一个类对象。</p><h2 id="4-Kotlin中类的默认修饰符：final"><a href="#4-Kotlin中类的默认修饰符：final" class="headerlink" title="4.Kotlin中类的默认修饰符：final"></a>4.Kotlin中类的默认修饰符：final</h2><p>首先，我们来说明两个Kotlin相比Java不一样的语法特性：<br>❑ Kotlin中没有采用Java中的extends和implements关键词，而是使用“:”来代替类的继承和接口实现；<br>❑ 由于Kotlin中类和方法默认是不可被继承或重写的，所以必须加上open修饰符。</p><p>实际业务中，我们由于没有仔细思考，设计了错误的继承关系，会导致导致一些问题。子类应该尽量避免重写父类的非抽象方法，因为一旦父类变更方法，子类的方法调用很可能会出错，而且重写父类非抽象方法违背了面向对象设计原则中的“里氏替换原则”。</p><p>什么是里氏替换原则？<br>对里氏替换原则通俗的理解是：子类可以扩展父类的功能，但不能改变父类原有的功能。<br>它包含以下4个设计原则：<br>❑ 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；<br>❑ 子类可以增加自己特有的方法；<br>❑ 当子类的方法实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松；<br>❑ 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。<br>然而，实际业务开发中我们常常很容易违背里氏替换原则，导致设计中出问题的概率大大增加。其根本原因，就是我们一开始并没有仔细思考一个类的继承关系。所以《Effective Java》也提出了一个原则：“要么为继承做好设计并且提供文档，否则就禁止这样做”。  </p><p>所以Kotlin站在前人肩膀上，吸取了它们的教训，认为类默认开放继承并不是一个好的选择。所以在Kotlin中的类或方法默认是不允许被继承或重写的。除非你主动加可以继承的修饰符，那便是添加open修饰符。  </p><p>除了限制类修饰符之外，还有一种修饰符就是可见性修饰符。下面我们就来看看Kotlin中的修饰符与Java中的差异。</p><table><thead><tr><th>修饰符</th><th>含义</th><th>与Java比较</th></tr></thead><tbody><tr><td>open</td><td>允许被继承和重写</td><td>相当于Java类与方法的默认情况</td></tr><tr><td>abstrat</td><td>抽象类或抽象方法</td><td>与Java一致</td></tr><tr><td>final</td><td>不允许被继承或重写（默认情况）</td><td>与Java主动指定final的效果一致</td></tr><tr><td>public</td><td>Kotlin中默认修饰符，全局可见</td><td>与Java中public效果相同</td></tr><tr><td>protected</td><td>受保护修饰类，类及子类可见</td><td>含义一致，但作用域除了类和子类外，包内也可见</td></tr><tr><td>private</td><td>私有修饰符，类内修饰只有本类可见，类外修饰文件内可见</td><td>私有修饰符，只有类内可见</td></tr><tr><td>internal</td><td>模块内可见</td><td></td></tr><tr><td>default</td><td></td><td>java 默认修饰符 包内可访问</td></tr></tbody></table><p> 注意：Kotlin默认没有采用包内可见的作用域，而是使用了模块内可见，用internal修饰符来表示作用域。<br> 那么到底什么算是模块呢？以下几种情况可以算作一个模块：<br> ❑ 一个Eclipse项目<br> ❑ 一个Intellij IDEA项目<br> ❑ 一个Maven项目<br> ❑ 一个Grandle项目<br> ❑ 一组由一次Ant任务执行编译的代码<br> 总的来说，一个模块可以看作一起编译的Kotlin文件组成的集合。</p><h2 id="5-Kotlin中内部类和嵌套类"><a href="#5-Kotlin中内部类和嵌套类" class="headerlink" title="5.Kotlin中内部类和嵌套类"></a>5.Kotlin中内部类和嵌套类</h2><p>众所周知，在Java中，我们通过在内部类的语法上增加一个static关键词，把它变成一个嵌套类。然而，Kotlin则是相反的思路，默认是一个嵌套类，必须加上inner关键字才是一个内部类，也就是说可以把静态的内部类看成嵌套类。内部类和嵌套类有明显的差别，具体体现在：内部类包含着对其外部类实例的引用，在内部类中我们可以使用外部类中的属性，而嵌套类不包含对其外部类实例的引用，所以它无法调用其外部类的属性。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Mule &#123;</span><br><span class="line"></span><br><span class="line">    val name: String = &quot;mule class &quot;</span><br><span class="line">    fun runFast() &#123;</span><br><span class="line">        HorseC().runFast()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun doLongTimeThing() &#123;</span><br><span class="line">        DonkeyC().doLongTimeThing()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private inner class HorseC : Horse()</span><br><span class="line"></span><br><span class="line">    private inner class DonkeyC : Donkey()</span><br><span class="line"></span><br><span class="line">    class TestClass &#123;</span><br><span class="line">        fun printName() &#123;</span><br><span class="line">            //不能调用参数Mule 的参数 name</span><br><span class="line">            print(&quot;test&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">反编译后的Java代码如下：</span><br><span class="line"></span><br><span class="line">public final class Mule &#123;</span><br><span class="line">   @NotNull</span><br><span class="line">   private final String name = &quot;put  class &quot;;</span><br><span class="line"></span><br><span class="line">   @NotNull</span><br><span class="line">   public final String getName() &#123;</span><br><span class="line">      return this.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void runFast() &#123;</span><br><span class="line">      (new Mule.HorseC()).runFast();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void doLongTimeThing() &#123;</span><br><span class="line">      (new Mule.DonkeyC()).doLongTimeThing();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private final class HorseC extends Horse &#123;</span><br><span class="line">      public HorseC() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   private final class DonkeyC extends Donkey &#123;</span><br><span class="line">      public DonkeyC() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static final class TestClass &#123;</span><br><span class="line">      public final void printName() &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.print(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）我们可以在一个类内部定义多个内部类，每个内部类的实例都有自己的独立状态，它们与外部对象的信息相互独立；<br>2）通过让内部类HorseC、DonkeyC分别继承Horse和Donkey这两个外部类，我们就可以在Mule类中定义它们的实例对象，从而获得了Horse和Donkey两者不同的状态和行为；<br>3）我们可以利用private修饰内部类，使得其他类都不能访问内部类，具有非常良好的封装性。  </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Kotlin面向对象&quot;&gt;&lt;a href=&quot;#Kotlin面向对象&quot; class=&quot;headerlink&quot; title=&quot;Kotlin面向对象&quot;&gt;&lt;/a&gt;Kotlin面向对象&lt;/h1&gt;&lt;h2 id=&quot;1-Kotlin中的类&quot;&gt;&lt;a href=&quot;#1-Kotlin中的类&quot; class=&quot;headerlink&quot; title=&quot;1.Kotlin中的类&quot;&gt;&lt;/a&gt;1.Kotlin中的类&lt;/h2&gt;&lt;p&gt;对象是由状态和行为组成的，我们可以根据他们描述一个事物。我们通过Kotlin定义一个User类&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="http://www.simonren.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="kotlin" scheme="http://www.simonren.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/kotlin/"/>
    
    
    <category term="基础" scheme="http://www.simonren.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="kotlin" scheme="http://www.simonren.com/tags/kotlin/"/>
    
  </entry>
  
</feed>
