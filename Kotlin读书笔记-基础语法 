<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="5AUIVYTbHIAuz-eQtxSfZbWW5eg9_EVZMSQycIuXrG0">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha256-Z1K5uhUaJXA7Ll0XrZ/0JhX4lAtZFpT6jkKrEDT0drU=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"www.simonren.com","root":"/","images":"/images","scheme":"Mist","darkmode":true,"version":"8.14.0","exturl":true,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":"default"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":true,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":true,"nav":null},"stickytabs":false,"motion":{"enable":true,"async":true,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"/search.json","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}}</script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/config.min.js"></script>

    <meta name="description" content="Kotlin基础语法1.不一样的类型声明在Java中，我们会把类型名称放在前面，如下声明一个变量。">
<meta property="og:type" content="article">
<meta property="og:title" content="Kotlin读书笔记-基础语法">
<meta property="og:url" content="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">
<meta property="og:site_name" content="Simon&#39;s Blog">
<meta property="og:description" content="Kotlin基础语法1.不一样的类型声明在Java中，我们会把类型名称放在前面，如下声明一个变量。">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2019-09-30T16:00:00.000Z">
<meta property="article:modified_time" content="2022-12-14T01:45:54.261Z">
<meta property="article:author" content="Simon Ren">
<meta property="article:tag" content="基础">
<meta property="article:tag" content="kotlin">
<meta name="twitter:card" content="summary">


<link rel="canonical" href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":"","permalink":"http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","path":"/Kotlin读书笔记-基础语法 ","title":"Kotlin读书笔记-基础语法"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>Kotlin读书笔记-基础语法 | Simon's Blog</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-108155018-3"></script>
  <script class="next-config" data-name="google_analytics" type="application/json">{"tracking_id":"UA-108155018-3","only_pageview":false}</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/analytics/google-analytics.min.js"></script>






  <script async defer data-website-id="" src=""></script>

  <script defer data-domain="" src=""></script>

  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
<link rel="alternate" href="/atom.xml" title="Simon's Blog" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Simon's Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档<span class="badge">3</span></a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类<span class="badge">4</span></a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签<span class="badge">3</span></a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup"><div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close" role="button">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#Kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95"><span class="nav-number">1.</span> <span class="nav-text">Kotlin基础语法</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E"><span class="nav-number">1.1.</span> <span class="nav-text">1.不一样的类型声明</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-%E5%A2%9E%E5%BC%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC"><span class="nav-number">1.2.</span> <span class="nav-text">2.增强的类型推导</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B"><span class="nav-number">1.3.</span> <span class="nav-text">3.声明函数的返回值类型</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-val%E4%B8%8Evar%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99"><span class="nav-number">1.4.</span> <span class="nav-text">4.val与var的使用规则</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#4-1-val%E7%9A%84%E5%90%AB%E4%B9%89%E5%BC%95%E7%94%A8%E4%B8%8D%E5%8F%AF%E5%8F%98"><span class="nav-number">1.4.1.</span> <span class="nav-text">4.1 val的含义引用不可变</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-2-%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8val%E6%9D%A5%E9%81%BF%E5%85%8D%E5%89%AF%E4%BD%9C%E7%94%A8"><span class="nav-number">1.4.2.</span> <span class="nav-text">4.2 优先使用val来避免副作用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-3-var%E7%9A%84%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4"><span class="nav-number">1.4.3.</span> <span class="nav-text">4.3 var的适用范围</span></a></li></ol></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Simon Ren"
      src="/images/icon.jpg">
  <p class="site-author-name" itemprop="name">Simon Ren</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">3</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
          <a href="/categories/">
        <span class="site-state-item-count">4</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NpbW9uUkhX" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;SimonRHW"><i class="fab fa-github fa-fw"></i></span>
      </span>
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlbmhvbmcyMDEyMTMxNA==" title="CSDN → https:&#x2F;&#x2F;blog.csdn.net&#x2F;renhong20121314"><i class="fa fa-globe-asia fa-fw"></i></span>
      </span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/icon.jpg">
      <meta itemprop="name" content="Simon Ren">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Simon's Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="Kotlin读书笔记-基础语法 | Simon's Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Kotlin读书笔记-基础语法
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2019-10-01 00:00:00" itemprop="dateCreated datePublished" datetime="2019-10-01T00:00:00+08:00">2019-10-01</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" itemprop="url" rel="index"><span itemprop="name">编程语言</span></a>
        </span>
          ，
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/kotlin/" itemprop="url" rel="index"><span itemprop="name">kotlin</span></a>
        </span>
    </span>

  
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <h1 id="Kotlin基础语法"><a href="#Kotlin基础语法" class="headerlink" title="Kotlin基础语法"></a>Kotlin基础语法</h1><h2 id="1-不一样的类型声明"><a href="#1-不一样的类型声明" class="headerlink" title="1.不一样的类型声明"></a>1.不一样的类型声明</h2><p>在Java中，我们会把类型名称放在前面，如下声明一个变量。</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String java = &quot;I am Java&quot;;</span><br></pre></td></tr></table></figure>
<p>Kotlin则采用不同的做法，与Java相反类型名放在变量名的后面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val kotlin:String = &quot;I am Kotlin&quot;</span><br></pre></td></tr></table></figure>
<p>为什么采用这样的声明? Kotling官方FAQ的回答：<br>这样可以是代码的可读性更好，同时也有利于使用一些良好的语法特性，比如省略类型声明</p>
<h2 id="2-增强的类型推导"><a href="#2-增强的类型推导" class="headerlink" title="2.增强的类型推导"></a>2.增强的类型推导</h2><p>类型推导是Kotlin在Java基础上增强的语言特性之一。通俗的理解，编译器可以在不显示声明类型的情况下，自动推导出它所需要的类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    val string = &quot;I am Kotlin&quot;</span><br><span class="line">    val int = 1234</span><br><span class="line">    val long = 1234L</span><br><span class="line">    val float = 1234f</span><br><span class="line">    val double = 12.34</span><br><span class="line">    val double2 = 10.1e6</span><br><span class="line"></span><br><span class="line">    printlnClassName(string)</span><br><span class="line">    printlnClassName(int)</span><br><span class="line">    printlnClassName(long)</span><br><span class="line">    printlnClassName(float)</span><br><span class="line">    printlnClassName(double)</span><br><span class="line">    printlnClassName(double2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun printlnClassName(msg: Any) &#123;</span><br><span class="line">    println(msg.javaClass.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果去下：</span><br><span class="line"></span><br><span class="line">java.lang.String</span><br><span class="line">java.lang.Integer</span><br><span class="line">java.lang.Long</span><br><span class="line">java.lang.Float</span><br><span class="line">java.lang.Double</span><br><span class="line">java.lang.Double</span><br></pre></td></tr></table></figure>
<p>类型推导在很大程度上提高了Kotlin这种静态语言的开发效率</p>
<h2 id="3-声明函数的返回值类型"><a href="#3-声明函数的返回值类型" class="headerlink" title="3.声明函数的返回值类型"></a>3.声明函数的返回值类型</h2><p>虽然Kotlin很大程度上支持了类型推导，并不意味着我们可以不声明函数返回值类型，如下定义一个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun sum(x: Int, y: Int): Int &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">与声明变量一样，类型信息放在函数名的后面，如果把声明去掉：</span><br><span class="line"></span><br><span class="line">fun sumOther(x:Int,y: Int)&#123;return x+y&#125;</span><br><span class="line"></span><br><span class="line">IDEA会直接提示返回类型与需求类型不一致 函数需要返回Unit类型，而实际返回Int类型。</span><br></pre></td></tr></table></figure>
<p>总结：<br>如果他是函数的参数，必须声明类型<br>如果它是非表达式定义的函数，除了Unit 也必须声明<br>如果是递归使用，必须声明类型<br>如果是公共方法的返回值，建议使用，为了提供更好的代码可读性。</p>
<h2 id="4-val与var的使用规则"><a href="#4-val与var的使用规则" class="headerlink" title="4.val与var的使用规则"></a>4.val与var的使用规则</h2><p>与Java另一点不同在于，Kotlin声明变量时，引入了val和var的概念。var很容易理解，JavaScript等其他语言也通过该关键字来声明变量，它对应的就是Java中的变量。</p>
<p>如果说var代表了varible（变量），那么val可看成value（值）的缩写。但也有人觉得这样并不直观或准确，而是把val解释成varible+final，即通过val声明的变量具有Java中的final关键字的效果，也就是引用不可变。<br>注：我们可以在IntelliJ IDEA或Android Studio中查看val语法反编译后转化的Java代码，从中可以很清楚地发现它是用final实现这一特性的</p>
<h3 id="4-1-val的含义引用不可变"><a href="#4-1-val的含义引用不可变" class="headerlink" title="4.1 val的含义引用不可变"></a>4.1 val的含义引用不可变</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public fun main() &#123;</span><br><span class="line">    val arrayVal = intArrayOf(1,2,3)</span><br><span class="line">    //Val cannot be reassigned</span><br><span class="line">    //arrayVal = intArrayOf(2,3,4)</span><br><span class="line">    println(arrayVal)</span><br><span class="line">    println(arrayVal[0])</span><br><span class="line">    arrayVal[0] = 5</span><br><span class="line">    println(arrayVal)</span><br><span class="line">    println(arrayVal[0])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[I@7eda2dbb</span><br><span class="line">1</span><br><span class="line">[I@7eda2dbb</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>通过输出引用不可变，所以arrayVal不能指向另一个数组，但我们可以修改数组里的值<br>因此，val声明的变量是只读变量，它的引用不可更改，但并不代表其引用对象也不可变。事实上，我们依然可以修改引用对象的可变成员。</p>
<h3 id="4-2-优先使用val来避免副作用"><a href="#4-2-优先使用val来避免副作用" class="headerlink" title="4.2 优先使用val来避免副作用"></a>4.2 优先使用val来避免副作用</h3><p>在很多Kotlin的学习资料中，都会传递一个原则：优先使用val来声明变量。<br>简单来说，副作用就是修改了某处的某些东西，比方说：<br>❑ 修改了外部变量的值。<br>❑ IO操作，如写数据到磁盘。<br>❑ UI操作，如修改了一个按钮的可操作状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public fun main() &#123;</span><br><span class="line">    count(1)</span><br><span class="line">    count(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var  a = 1</span><br><span class="line">public fun count(i :Int)&#123;</span><br><span class="line">    a= a+1</span><br><span class="line">    println(i+a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>在以上代码中，我们会发现多次调用count(1)得到的结果并不相同，显然这是受到了外部变量a的影响，这个就是典型的副作用。如果我们把var换成val，然后再执行类似的操作，编译就会报错。这就有效避免了之前的情况</p>
<p>当然，这并不意味着用val声明变量后就不能再对该变量进行赋值，事实上，Kotlin也支持我们在一开始不定义val变量的取值，随后再进行赋值。然而，因为引用不可变，val声明的变量只能被赋值一次，且在声明时不能省略变量类型.</p>
<h3 id="4-3-var的适用范围"><a href="#4-3-var的适用范围" class="headerlink" title="4.3 var的适用范围"></a>4.3 var的适用范围</h3><p>一个可能被提及的问题是：既然val这么好，那么为什么Kotlin还要保留var呢？<br>一个可能被提及的问题是：既然val这么好，那么为什么Kotlin还要保留var呢？事实上，从Kotlin诞生的那一刻就决定了必须拥抱var，因为它兼容Java。除此之外，在某些场景使用var确实会起到不错的效果。举个例子，假设我们现在有一个整数列表，然后遍历元素操作后获得计算结果，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun callVar(list: List&lt;Int&gt;): Int &#123;  //5,2,3      5,10,12,36,39</span><br><span class="line">    var res = 0;</span><br><span class="line">    for (a in list) &#123;</span><br><span class="line">        res *= a</span><br><span class="line">        res += a</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是我们非常熟悉的做法，以上代码中的res是个局部的可变变量，它与外界没有任何交互，非常安全可控。<br>我们再来尝试用val实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun callVal(list: List&lt;Int&gt;): Int &#123;</span><br><span class="line">    fun recurse(list: List&lt;Int&gt;, res: Int): Int &#123;</span><br><span class="line">        return if (list.isNotEmpty()) &#123;</span><br><span class="line">            val a = list.first();</span><br><span class="line">            recurse(list.drop(1), res * a + a)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return recurse(list, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就必须利用递归才能实现，原本非常简单的逻辑现在变得非常不直观。<br>不过Kotlin List有个fold操作函数可以实现一个精简的操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.</span><br><span class="line"> */</span><br><span class="line">public inline fun &lt;T, R&gt; Iterable&lt;T&gt;.fold(initial: R, operation: (acc: R, T) -&gt; R): R &#123;</span><br><span class="line">    var accumulator = initial</span><br><span class="line">    for (element in this) accumulator = operation(accumulator, element)</span><br><span class="line">    return accumulator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun call(list: List&lt;Int&gt;): Int &#123;</span><br><span class="line">    return list.fold(0) &#123; res, el -&gt;</span><br><span class="line">        res * el + el</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<br>1）用val声明的属性将只有getter方法，因为它不可修改；而用var修饰的属性将同时拥有getter和setter方法。<br>2）用private修饰的属性编译器将会省略getter和setter方法，因为在类外部已经无法访问它了，这两个方法的存在也就没有意义了。</p>

    </div>

    
    
    

    <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/%E5%9F%BA%E7%A1%80/" rel="tag"># 基础</a>
              <a href="/tags/kotlin/" rel="tag"># kotlin</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" rel="prev" title="Kotlin读书笔记-面向对象">
                  <i class="fa fa-chevron-left"></i> Kotlin读书笔记-面向对象
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/AOSP%E4%BB%A3%E7%A0%81%E6%B5%8F%E8%A7%88%E4%B8%8E%E8%B0%83%E8%AF%95" rel="next" title="AOSP代码浏览与调试">
                  AOSP代码浏览与调试 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">


<div class="copyright">
  &copy; 2014 – 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">SimonRen</span>
</div>
  <div class="powered-by">由 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9taXN0Lw==">NexT.Mist</span> 强力驱动
  </div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/next-theme-pjax/0.6.0/pjax.min.js" integrity="sha256-vxLn1tSKWD4dqbMRyv940UYw4sXgMtYcK6reefzZrao=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/medium-zoom/1.0.8/medium-zoom.min.js" integrity="sha256-7PhEpEWEW0XXQ0k6kQrPKwuoIomz8R8IYyuU1Qew4P8=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/comments.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/utils.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/motion.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/schemes/muse.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/next-boot.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/pjax.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/search/local-search.min.js"></script>


  <script class="next-config" data-name="mermaid" type="application/json">{"enable":true,"theme":{"light":"default","dark":"dark"},"js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.2.2/mermaid.min.js","integrity":"sha256-o5AUfgOkNFWuInA78GVCoVdGoN9eTaB3Hxu+ep7TTrY="}}</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/tags/mermaid.min.js"></script>



  




  

  <script class="next-config" data-name="enableMath" type="application/json">false</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"ams","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js","integrity":"sha256-MASABpB4tYktI2Oitl4t+78w/lyA+D7b/s9GEP0JOGI="}}</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/math/mathjax.min.js"></script>



</body>
</html>
