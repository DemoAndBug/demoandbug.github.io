<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="5AUIVYTbHIAuz-eQtxSfZbWW5eg9_EVZMSQycIuXrG0">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha256-Z1K5uhUaJXA7Ll0XrZ/0JhX4lAtZFpT6jkKrEDT0drU=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"www.simonren.com","root":"/","images":"/images","scheme":"Mist","darkmode":true,"version":"8.14.0","exturl":true,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":"default"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":true,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":true,"nav":null},"stickytabs":false,"motion":{"enable":true,"async":true,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"/search.json","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}}</script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/config.min.js"></script>

    <meta name="description" content="Kotlin面向对象1.Kotlin中的类对象是由状态和行为组成的，我们可以根据他们描述一个事物。我们通过Kotlin定义一个User类">
<meta property="og:type" content="article">
<meta property="og:title" content="Kotlin读书笔记-面向对象">
<meta property="og:url" content="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">
<meta property="og:site_name" content="Simon&#39;s Blog">
<meta property="og:description" content="Kotlin面向对象1.Kotlin中的类对象是由状态和行为组成的，我们可以根据他们描述一个事物。我们通过Kotlin定义一个User类">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2019-09-30T16:00:00.000Z">
<meta property="article:modified_time" content="2022-12-14T01:45:54.261Z">
<meta property="article:author" content="Simon Ren">
<meta property="article:tag" content="基础">
<meta property="article:tag" content="kotlin">
<meta name="twitter:card" content="summary">


<link rel="canonical" href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":"","permalink":"http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","path":"/Kotlin读书笔记-面向对象","title":"Kotlin读书笔记-面向对象"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>Kotlin读书笔记-面向对象 | Simon's Blog</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-108155018-3"></script>
  <script class="next-config" data-name="google_analytics" type="application/json">{"tracking_id":"UA-108155018-3","only_pageview":false}</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/analytics/google-analytics.min.js"></script>






  <script async defer data-website-id="" src=""></script>

  <script defer data-domain="" src=""></script>

  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
<link rel="alternate" href="/atom.xml" title="Simon's Blog" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Simon's Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档<span class="badge">3</span></a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类<span class="badge">4</span></a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签<span class="badge">3</span></a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup"><div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close" role="button">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#Kotlin%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1"><span class="nav-number">1.</span> <span class="nav-text">Kotlin面向对象</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-Kotlin%E4%B8%AD%E7%9A%84%E7%B1%BB"><span class="nav-number">1.1.</span> <span class="nav-text">1.Kotlin中的类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-Kotlin%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3"><span class="nav-number">1.2.</span> <span class="nav-text">2.Kotlin中的接口</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-Kotlin%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"><span class="nav-number">1.3.</span> <span class="nav-text">3.Kotlin中的构造函数</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-Kotlin%E4%B8%AD%E7%9A%84init%E8%AF%AD%E5%8F%A5%E5%BF%AB"><span class="nav-number">1.4.</span> <span class="nav-text">3.Kotlin中的init语句快</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-Kotlin%E4%B8%AD%E7%9A%84%E5%BB%B6%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96"><span class="nav-number">1.5.</span> <span class="nav-text">4.Kotlin中的延时初始化</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-Kotlin%E4%B8%AD%E7%B1%BB%E7%9A%84%E9%BB%98%E8%AE%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%9Afinal"><span class="nav-number">1.6.</span> <span class="nav-text">4.Kotlin中类的默认修饰符：final</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-Kotlin%E4%B8%AD%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%B5%8C%E5%A5%97%E7%B1%BB"><span class="nav-number">1.7.</span> <span class="nav-text">5.Kotlin中内部类和嵌套类</span></a></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Simon Ren"
      src="/images/icon.jpg">
  <p class="site-author-name" itemprop="name">Simon Ren</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">3</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
          <a href="/categories/">
        <span class="site-state-item-count">4</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NpbW9uUkhX" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;SimonRHW"><i class="fab fa-github fa-fw"></i></span>
      </span>
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlbmhvbmcyMDEyMTMxNA==" title="CSDN → https:&#x2F;&#x2F;blog.csdn.net&#x2F;renhong20121314"><i class="fa fa-globe-asia fa-fw"></i></span>
      </span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://www.simonren.com/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/icon.jpg">
      <meta itemprop="name" content="Simon Ren">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Simon's Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="Kotlin读书笔记-面向对象 | Simon's Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Kotlin读书笔记-面向对象
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2019-10-01 00:00:00" itemprop="dateCreated datePublished" datetime="2019-10-01T00:00:00+08:00">2019-10-01</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" itemprop="url" rel="index"><span itemprop="name">编程语言</span></a>
        </span>
          ，
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/kotlin/" itemprop="url" rel="index"><span itemprop="name">kotlin</span></a>
        </span>
    </span>

  
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <h1 id="Kotlin面向对象"><a href="#Kotlin面向对象" class="headerlink" title="Kotlin面向对象"></a>Kotlin面向对象</h1><h2 id="1-Kotlin中的类"><a href="#1-Kotlin中的类" class="headerlink" title="1.Kotlin中的类"></a>1.Kotlin中的类</h2><p>对象是由状态和行为组成的，我们可以根据他们描述一个事物。我们通过Kotlin定义一个User类</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    var name: String = &quot;simon&quot;</span><br><span class="line">    var surname: String = &quot;&quot;</span><br><span class="line">        get() = field.toUpperCase()</span><br><span class="line"></span><br><span class="line">    var isEmail: Boolean = false</span><br><span class="line"></span><br><span class="line">    var email: String = &quot;&quot;</span><br><span class="line">        set(value) &#123;</span><br><span class="line">            if (isEmailValid(value)) field = value</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    private fun isEmailValid(value: String): Boolean &#123;</span><br><span class="line">        return isEmail</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //全局可见</span><br><span class="line">    fun eat() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以使用熟悉的class 结构来声明一个类，我们将上述代码反编译成Java版本，然后分析差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class User &#123;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String name = &quot;simon&quot;;</span><br><span class="line">   private final int age = 1;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String surname = &quot;&quot;;</span><br><span class="line">   private boolean isEmail;</span><br><span class="line">   @NotNull</span><br><span class="line">   private String email = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">   @NotNull</span><br><span class="line">   public final String getName() &#123;</span><br><span class="line">      return this.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void setName(@NotNull String var1) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(var1, &quot;&lt;set-?&gt;&quot;);</span><br><span class="line">      this.name = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final int getAge() &#123;</span><br><span class="line">      return this.age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private final boolean isEmailValid(String value) &#123;</span><br><span class="line">      return this.isEmail;</span><br><span class="line">   &#125;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，虽然Kotlin中类声明的语法非常近似Java，但也存在很多不同：<br>1）不可变属性成员。Kotlin支持用val在类中声明引用不可变的属性成员，这是利用Java中的final修饰符来实现的，使用var声明的属性则反之引用可变。<br>2）属性默认值。因为Java的属性都有默认值，比如int类型的默认值为0，引用类型的默认值为null，所以在声明属性的时候我们不需要指定默认值。而在Kotlin中，除非显式地声明延迟初始化，不然就需要指定属性的默认值<br>3）不同的可访问修饰符。Kotlin类中的成员默认是全局可见，而Java的默认可见域是包作用域，因此在Java版本中，我们必须采用public修饰才能达相同的效果  </p>
<h2 id="2-Kotlin中的接口"><a href="#2-Kotlin中的接口" class="headerlink" title="2.Kotlin中的接口"></a>2.Kotlin中的接口</h2><p>众所周知，Java8引入了一个新特性：接口方法支持默认实现，接下来看看Kotlin 如何声明一个接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Behavior &#123;</span><br><span class="line">    val id: Int</span><br><span class="line">    fun eat()</span><br><span class="line">    fun test()&#123;</span><br><span class="line">        println(&quot;test&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上面Kotlin声明的接口转换为Java代码，提取其中关键的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Behavior &#123;</span><br><span class="line">   int getId();</span><br><span class="line"></span><br><span class="line">   void eat();</span><br><span class="line"></span><br><span class="line">   void test();</span><br><span class="line"></span><br><span class="line">   @Metadata(</span><br><span class="line">      mv = &#123;1, 1, 16&#125;,</span><br><span class="line">      bv = &#123;1, 0, 3&#125;,</span><br><span class="line">      k = 3</span><br><span class="line">   )</span><br><span class="line">   public static final class DefaultImpls &#123;</span><br><span class="line">      public static void test(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上，Kotlin可以定义带有方法实现的接口，还支持抽象属性（上面的id），同时kotlin是基于Java6的，看反编译后的Java代码，Kotlin编译器是通过一个静态内部类DefaultImpls来实现test的。</p>
<p>上述代码若直接对id进行默认赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Behavior &#123;</span><br><span class="line">    val id: Int = 10 //idea会提示：Property initializers are not allowed in interfaces</span><br><span class="line">    fun eat()</span><br><span class="line">    fun test()&#123;</span><br><span class="line">        println(&quot;test&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Kotlin 提供了另外一种方式实现了这种效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val id: Int</span><br><span class="line">     get() = 10</span><br></pre></td></tr></table></figure>

<p>反编译后Java代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Behavior &#123;</span><br><span class="line">   int getId();</span><br><span class="line"></span><br><span class="line">   void eat();</span><br><span class="line"></span><br><span class="line">   void test();</span><br><span class="line"></span><br><span class="line">   void test2();</span><br><span class="line"></span><br><span class="line">   @Metadata(</span><br><span class="line">      mv = &#123;1, 1, 16&#125;,</span><br><span class="line">      bv = &#123;1, 0, 3&#125;,</span><br><span class="line">      k = 3</span><br><span class="line">   )</span><br><span class="line">   public static final class DefaultImpls &#123;</span><br><span class="line">      public static int getId(Behavior $this) &#123;</span><br><span class="line">         return 10;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public static void test(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public static void test2(Behavior $this) &#123;</span><br><span class="line">         String var1 = &quot;test2&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Kotlin接口中的属性背后其实是用方法来实现的，所以说如果我们要为变量赋值常量，那么就需要编译器原生就支持方法默认实现。但Kotlin是基于Java6的，当时并不支持这种特性，所以我们并不能像Java那样给一个接口的属性直接赋值一个常量。</p>
<h2 id="3-Kotlin中的构造函数"><a href="#3-Kotlin中的构造函数" class="headerlink" title="3.Kotlin中的构造函数"></a>3.Kotlin中的构造函数</h2><p>需要注意的是Kotlin中并没有我们熟悉的new关键字，你可以直接声明一个类的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val user = User()</span><br></pre></td></tr></table></figure>

<p>现实中，你很可能因为需要传入不同的参数组合，而在类中创建多个构造方法，在Java中这是利用构造方法重载来实现的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age, String email) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现Java中的这种方式存在两个缺点：<br>❑ 如果要支持任意参数组合来创建对象，那么需要实现的构造方法将会非常多。<br>❑ 每个构造方法中的代码会存在冗余，如前两个构造方法都对age和name进行了相同的赋值操作。</p>
<p>在Kotlin中是通过引入新的构造语法来解决这些问题。从而避免不必要的方法重载。用Kotlin改下如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    val name: String = &quot;simon&quot;,</span><br><span class="line">    val age: Int = 18,</span><br><span class="line">    val email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    //这里可以省略&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一行代码就可以实现与java等价的效果。需要注意的是，由于参数默认值的存在，我们在创建一个类对象时，最好指定参数的名称，否则必须按照实际参数的顺序进行赋值。</p>
<p>我们在类中可以用val或者var来声明构造方法的参数。这一方面代表了参数的引用可变性，另一方面它也使得我们在构造类的语法上得到了简化。事实上，构造方法的参数名前当然可以没有val和var，然而带上它们之后就等价于在类内部声明了一个同名的属性，我们可以用this来进行调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    name: String = &quot;simon&quot;,</span><br><span class="line">    age: Int = 18,</span><br><span class="line">    email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val name: String</span><br><span class="line">    val age: Int</span><br><span class="line">    val email: String</span><br><span class="line">    init &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.email = email</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过反编译成java代码可以看出两者是等价的。</p>
<h2 id="3-Kotlin中的init语句快"><a href="#3-Kotlin中的init语句快" class="headerlink" title="3.Kotlin中的init语句快"></a>3.Kotlin中的init语句快</h2><p>Kotlin引入了一种叫作init语句块的语法，它属于上述构造方法的一部分，两者在表现形式上却是分离的。类的构造方法在类的外部，它只能对参数进行赋值。如果我们需要在初始化时进行其他的额外操作，那么我们就可以使用init语句块来执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    name: String = &quot;simon&quot;,</span><br><span class="line">    age: Int = 18,</span><br><span class="line">    email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val name: String</span><br><span class="line">    val age: Int</span><br><span class="line">    val email: String</span><br><span class="line">    init &#123;</span><br><span class="line">        println(&quot;do some other things&quot;)</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.email = email</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main()&#123;</span><br><span class="line">    val user = User(&quot;test&quot;, 20, &quot;hi&quot;)</span><br><span class="line">    println(user.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">do some other things</span><br><span class="line">test</span><br></pre></td></tr></table></figure>

<p>事实上，我们的构造方法还可以拥有多个init，它们会在对象被创建时按照类中从上到下的顺序先后执行，通过该特性我们可以使用多个init语句块进行职能分离，这在复杂的业务开发（如Android）中会显得特别有用。</p>
<h2 id="4-Kotlin中的延时初始化"><a href="#4-Kotlin中的延时初始化" class="headerlink" title="4.Kotlin中的延时初始化"></a>4.Kotlin中的延时初始化</h2><p>延时初始化即我们可以不用在类对象初始化的时候就必须有值。在Kotlin中，我们主要使用lateinit和by lazy这两种语法来实现延迟初始化的效果。</p>
<p>如果这是一个用val声明的变量，我们可以用by lazy来修饰：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(</span><br><span class="line">    val name: String = &quot;simon&quot;,</span><br><span class="line">    val age: Int = 18,</span><br><span class="line">    val email: String = &quot;simon@mail&quot;</span><br><span class="line">) &#123;</span><br><span class="line">    val category: String by lazy &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结by lazy语法的特点如下：<br>❑ 该变量必须是引用不可变的，而不能通过var来声明。<br>❑ 在被首次调用时，才会进行赋值操作。一旦被赋值，后续它将不能被更改。</p>
<p>lazy的背后是接受一个lambda并返回一个Lazy <T>实例的函数，第一次访问该属性时，会执行lazy对应的Lambda表达式并记录结果，后续访问该属性时只是返回记录的结果。</p>
<p>另外系统会给lazy属性默认加上同步锁，有如下几种模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    //默认添加 、线程安全，同一时刻只允许一个线程对lazy属性进行初始化</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //并行模式，可以并行执行，没有线程安全问题</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.PUBLICATION) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不做任何线程保证也不会有任何线程开销</span><br><span class="line">    val category: String by lazy(LazyThreadSafetyMode.NONE) &#123;</span><br><span class="line">        if (age &gt;= 18) &quot;adult&quot; else &quot;boy&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">源码：</span><br><span class="line"></span><br><span class="line">Lazy.kt</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.</span><br><span class="line"> */</span><br><span class="line">public enum class LazyThreadSafetyMode &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.</span><br><span class="line">     */</span><br><span class="line">    SYNCHRONIZED,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,</span><br><span class="line">     * but only the first returned value will be used as the value of [Lazy] instance.</span><br><span class="line">     */</span><br><span class="line">    PUBLICATION,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.</span><br><span class="line">     *</span><br><span class="line">     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.</span><br><span class="line">     */</span><br><span class="line">    NONE,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LazyJVM.kt:</span><br><span class="line"></span><br><span class="line">public actual fun &lt;T&gt; lazy(mode: LazyThreadSafetyMode, initializer: () -&gt; T): Lazy&lt;T&gt; =</span><br><span class="line">    when (mode) &#123;</span><br><span class="line">        LazyThreadSafetyMode.SYNCHRONIZED -&gt; SynchronizedLazyImpl(initializer)</span><br><span class="line">        LazyThreadSafetyMode.PUBLICATION -&gt; SafePublicationLazyImpl(initializer)</span><br><span class="line">        LazyThreadSafetyMode.NONE -&gt; UnsafeLazyImpl(initializer)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>与lazy不同，lateinit主要用于var声明的变量，然而它不能用于基本数据类型，如Int、Long等，我们需要用Integer这种包装类作为替代.</p>
<p>总而言之，Kotlin并不主张用Java中的构造方法重载，来解决多个构造参数组合调用的问题。取而代之的方案是利用构造参数默认值及用val、var来声明构造参数的语法，以更简洁地构造一个类对象。</p>
<h2 id="4-Kotlin中类的默认修饰符：final"><a href="#4-Kotlin中类的默认修饰符：final" class="headerlink" title="4.Kotlin中类的默认修饰符：final"></a>4.Kotlin中类的默认修饰符：final</h2><p>首先，我们来说明两个Kotlin相比Java不一样的语法特性：<br>❑ Kotlin中没有采用Java中的extends和implements关键词，而是使用“:”来代替类的继承和接口实现；<br>❑ 由于Kotlin中类和方法默认是不可被继承或重写的，所以必须加上open修饰符。</p>
<p>实际业务中，我们由于没有仔细思考，设计了错误的继承关系，会导致导致一些问题。子类应该尽量避免重写父类的非抽象方法，因为一旦父类变更方法，子类的方法调用很可能会出错，而且重写父类非抽象方法违背了面向对象设计原则中的“里氏替换原则”。</p>
<p>什么是里氏替换原则？<br>对里氏替换原则通俗的理解是：子类可以扩展父类的功能，但不能改变父类原有的功能。<br>它包含以下4个设计原则：<br>❑ 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；<br>❑ 子类可以增加自己特有的方法；<br>❑ 当子类的方法实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松；<br>❑ 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。<br>然而，实际业务开发中我们常常很容易违背里氏替换原则，导致设计中出问题的概率大大增加。其根本原因，就是我们一开始并没有仔细思考一个类的继承关系。所以《Effective Java》也提出了一个原则：“要么为继承做好设计并且提供文档，否则就禁止这样做”。  </p>
<p>所以Kotlin站在前人肩膀上，吸取了它们的教训，认为类默认开放继承并不是一个好的选择。所以在Kotlin中的类或方法默认是不允许被继承或重写的。除非你主动加可以继承的修饰符，那便是添加open修饰符。  </p>
<p>除了限制类修饰符之外，还有一种修饰符就是可见性修饰符。下面我们就来看看Kotlin中的修饰符与Java中的差异。</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>含义</th>
<th>与Java比较</th>
</tr>
</thead>
<tbody><tr>
<td>open</td>
<td>允许被继承和重写</td>
<td>相当于Java类与方法的默认情况</td>
</tr>
<tr>
<td>abstrat</td>
<td>抽象类或抽象方法</td>
<td>与Java一致</td>
</tr>
<tr>
<td>final</td>
<td>不允许被继承或重写（默认情况）</td>
<td>与Java主动指定final的效果一致</td>
</tr>
<tr>
<td>public</td>
<td>Kotlin中默认修饰符，全局可见</td>
<td>与Java中public效果相同</td>
</tr>
<tr>
<td>protected</td>
<td>受保护修饰类，类及子类可见</td>
<td>含义一致，但作用域除了类和子类外，包内也可见</td>
</tr>
<tr>
<td>private</td>
<td>私有修饰符，类内修饰只有本类可见，类外修饰文件内可见</td>
<td>私有修饰符，只有类内可见</td>
</tr>
<tr>
<td>internal</td>
<td>模块内可见</td>
<td></td>
</tr>
<tr>
<td>default</td>
<td></td>
<td>java 默认修饰符 包内可访问</td>
</tr>
</tbody></table>
<p> 注意：Kotlin默认没有采用包内可见的作用域，而是使用了模块内可见，用internal修饰符来表示作用域。<br> 那么到底什么算是模块呢？以下几种情况可以算作一个模块：<br> ❑ 一个Eclipse项目<br> ❑ 一个Intellij IDEA项目<br> ❑ 一个Maven项目<br> ❑ 一个Grandle项目<br> ❑ 一组由一次Ant任务执行编译的代码<br> 总的来说，一个模块可以看作一起编译的Kotlin文件组成的集合。</p>
<h2 id="5-Kotlin中内部类和嵌套类"><a href="#5-Kotlin中内部类和嵌套类" class="headerlink" title="5.Kotlin中内部类和嵌套类"></a>5.Kotlin中内部类和嵌套类</h2><p>众所周知，在Java中，我们通过在内部类的语法上增加一个static关键词，把它变成一个嵌套类。然而，Kotlin则是相反的思路，默认是一个嵌套类，必须加上inner关键字才是一个内部类，也就是说可以把静态的内部类看成嵌套类。内部类和嵌套类有明显的差别，具体体现在：内部类包含着对其外部类实例的引用，在内部类中我们可以使用外部类中的属性，而嵌套类不包含对其外部类实例的引用，所以它无法调用其外部类的属性。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Mule &#123;</span><br><span class="line"></span><br><span class="line">    val name: String = &quot;mule class &quot;</span><br><span class="line">    fun runFast() &#123;</span><br><span class="line">        HorseC().runFast()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun doLongTimeThing() &#123;</span><br><span class="line">        DonkeyC().doLongTimeThing()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private inner class HorseC : Horse()</span><br><span class="line"></span><br><span class="line">    private inner class DonkeyC : Donkey()</span><br><span class="line"></span><br><span class="line">    class TestClass &#123;</span><br><span class="line">        fun printName() &#123;</span><br><span class="line">            //不能调用参数Mule 的参数 name</span><br><span class="line">            print(&quot;test&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">反编译后的Java代码如下：</span><br><span class="line"></span><br><span class="line">public final class Mule &#123;</span><br><span class="line">   @NotNull</span><br><span class="line">   private final String name = &quot;put  class &quot;;</span><br><span class="line"></span><br><span class="line">   @NotNull</span><br><span class="line">   public final String getName() &#123;</span><br><span class="line">      return this.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void runFast() &#123;</span><br><span class="line">      (new Mule.HorseC()).runFast();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public final void doLongTimeThing() &#123;</span><br><span class="line">      (new Mule.DonkeyC()).doLongTimeThing();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private final class HorseC extends Horse &#123;</span><br><span class="line">      public HorseC() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   private final class DonkeyC extends Donkey &#123;</span><br><span class="line">      public DonkeyC() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static final class TestClass &#123;</span><br><span class="line">      public final void printName() &#123;</span><br><span class="line">         String var1 = &quot;test&quot;;</span><br><span class="line">         boolean var2 = false;</span><br><span class="line">         System.out.print(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1）我们可以在一个类内部定义多个内部类，每个内部类的实例都有自己的独立状态，它们与外部对象的信息相互独立；<br>2）通过让内部类HorseC、DonkeyC分别继承Horse和Donkey这两个外部类，我们就可以在Mule类中定义它们的实例对象，从而获得了Horse和Donkey两者不同的状态和行为；<br>3）我们可以利用private修饰内部类，使得其他类都不能访问内部类，具有非常良好的封装性。  </p>

    </div>

    
    
    

    <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/%E5%9F%BA%E7%A1%80/" rel="tag"># 基础</a>
              <a href="/tags/kotlin/" rel="tag"># kotlin</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
            </div>
            <div class="post-nav-item">
                <a href="/Kotlin%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20" rel="next" title="Kotlin读书笔记-基础语法">
                  Kotlin读书笔记-基础语法 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">


<div class="copyright">
  &copy; 2014 – 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">SimonRen</span>
</div>
  <div class="powered-by">由 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9taXN0Lw==">NexT.Mist</span> 强力驱动
  </div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/next-theme-pjax/0.6.0/pjax.min.js" integrity="sha256-vxLn1tSKWD4dqbMRyv940UYw4sXgMtYcK6reefzZrao=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/medium-zoom/1.0.8/medium-zoom.min.js" integrity="sha256-7PhEpEWEW0XXQ0k6kQrPKwuoIomz8R8IYyuU1Qew4P8=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/comments.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/utils.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/motion.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/schemes/muse.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/next-boot.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/pjax.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/search/local-search.min.js"></script>


  <script class="next-config" data-name="mermaid" type="application/json">{"enable":true,"theme":{"light":"default","dark":"dark"},"js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.2.2/mermaid.min.js","integrity":"sha256-o5AUfgOkNFWuInA78GVCoVdGoN9eTaB3Hxu+ep7TTrY="}}</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/tags/mermaid.min.js"></script>



  




  

  <script class="next-config" data-name="enableMath" type="application/json">false</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"ams","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js","integrity":"sha256-MASABpB4tYktI2Oitl4t+78w/lyA+D7b/s9GEP0JOGI="}}</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-theme-next/8.14.0/third-party/math/mathjax.min.js"></script>



</body>
</html>
